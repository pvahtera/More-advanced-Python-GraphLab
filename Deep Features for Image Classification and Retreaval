import graphlab
image_train = graphlab.SFrame('image_train_data/')
image_test = graphlab.SFrame('image_test_data/')
graphlab.canvas.set_target('ipynb')
image_train['image'].show()
raw_pixel_model = graphlab.logistic_classifier.create(image_train,target='label',
                                              features=['image_array'])
image_test[0:3]['image'].show()
raw_pixel_model.predict(image_test[0:3])
raw_pixel_model.evaluate(image_test)
len(image_train)
image_train.head()


#Given the deep features, let's train a classifier
deep_features_model = graphlab.logistic_classifier.create(image_train,
                                                         features=['deep_features'],
                                                         target='label')

//As we can see, deep features provide us with significantly better accuracy
image_test[0:3]['image'].show()
deep_features_model.predict(image_test[0:3])
deep_features_model.evaluate(image_test)

//We can now build a simple image retrieval system that finds the nearest neighbors for any image.

knn_model = graphlab.nearest_neighbors.create(image_train,features=['deep_features'],
                                             label='id')

// Finding similar images to a cat picture
graphlab.canvas.set_target('ipynb')
cat = image_train[18:19]
cat['image'].show()
knn_model.query(cat)

// Simple function for viewing nn to save typing
def get_images_from_ids(query_result):
    return image_train.filter_by(query_result['reference_label'],'id')

cat_neighbors = get_images_from_ids(knn_model.query(cat))
cat_neighbors['image'].show()

// Finding similar images to a car
car = image_train[8:9]
car['image'].show()

get_images_from_ids(knn_model.query(car))['image'].show()
//Just for fun, let's create a lambda to find and show nearest neighbor images
show_neighbors = lambda i: get_images_from_ids(knn_model.query(image_train[i:i+1]))['image'].show()

show_neighbors(8)
show_neighbors(26)

